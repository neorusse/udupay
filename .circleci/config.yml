# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  # Build section, it defines the name for the job - PREN Server.
  PREN Server:
    # The docker section defines an executor for the build process.
    # An executor is a place where build steps will occur. By specifying docker,
    # we are telling Circle CI that we want our build steps to take place inside of a Docker container.
    docker:
      # specify the version you desire here
      - image: circleci/node:10

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:4.0.3

    working_directory: ~/pren-typescript

    # The steps section defines a list of steps that need to be executed to complete the build process.
    # checkout is a CircleCI built in command which is responsible for checking out the project’s source code
    # into the Job’s (PREN Server) working_directory
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependency-cache-server-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependency-cache-server-

      # If you need reproducible dependencies, which is usually the case with the continuous integration systems,
      # use yarn --frozen-lockfile instead of yarn to install all dependencies from yarn.lock
      - run: yarn --frozen-lockfile

      - save_cache:
          key: dependency-cache-server-{{ checksum "package.json" }}
          paths:
            # Save the yarn cache folder so we can cache cypress as well.
            - ~/.cache

      # Run typescript
      - run: echo "Compiling TypeScript to JavaScript"
      - run: yarn tsc
      # run tests!
      - run: echo "Testing API Routes"
      - run: yarn jest

  PREN Client:
    docker:
      # specify the version you desire here
      - image: circleci/node:10

    working_directory: ~/pren-typescript

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependency-cache-client-{{ checksum "./client/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependency-cache-client-

      - run:
          name: Install client dependencies
          command: cd client && yarn --frozen-lockfile

      - save_cache:
          key: dependency-cache-client-{{ checksum "./client/package.json" }}
          paths:
            - ./client/node_modules

      # run tests!
      - run:
          name: Run client tests
          command: cd client && yarn test

  PREN Integration:
    docker:
      # specify the version you desire here
      - image: cypress/browsers:node10.11.0-chrome75

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:4.0.3

    working_directory: ~/pren-typescript

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependency-cache-server-{{ checksum "package.json" }}
            - dependency-cache-server-

      - run:
          name: Build client
          command: cd client && yarn --frozen-lockfile && yarn build
      - run:
          name: Build server
          command: yarn --frozen-lockfile && yarn tsc

      # run tests!
      - run:
          name: Run integration tests
          command: npx start-server-and-test start http://localhost:3050 test:integration

workflows:
  version: 2
  Test Server and Client:
    jobs:
      - PREN Client
      - PREN Server
      - PREN Integration:
          filters:
            branches:
              only:
                - master
          requires:
            - PREN Client
            - PREN Server
